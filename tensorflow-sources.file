##Tensorflow Common build files
BuildRequires: bazel java-env git patchelf
#Keep all requires in separate file, so that can be included in py-tensorflow too
## INCLUDE cpp-standard
## INCLUDE tensorflow-requires
## INCLUDE compilation_flags
## INCLUDE microarch_flags

#Set tensorflow_mkldnn_contraction_kernel option
#https://github.com/tensorflow/tensorflow/blob/v2.12.1/tensorflow/core/kernels/BUILD#L79-L89
%if "%{?enable_tf_mkldnn:set}" != "set"
%define  enable_tf_mkldnn 1
%endif

Source: git+https://github.com/%{github_user}/tensorflow.git?obj=%{branch}/%{tag}&export=tensorflow-%{realversion}&output=/tensorflow-%{realversion}.tgz

%if "%{?build_type:set}" != "set"
%define build_type opt
%endif
%if "%{?tfversion:set}" != "set"
%define tfversion %{realversion}
%endif


%define majorversion %(echo %tfversion | cut -d . -f 1)

%prep

%setup -q -n tensorflow-%{realversion}
sed -i -e 's|lib/python[^/]*/site-packages/|lib/python%{cms_python3_major_minor_version}/site-packages/|'  third_party/systemlibs/pybind11.BUILD

%build

export PYTHON_BIN_PATH="$(which python3)"
export USE_DEFAULT_PYTHON_LIB_PATH=1
export GCC_HOST_COMPILER_PATH="$(which gcc)"
export CC_OPT_FLAGS="-Wno-sign-compare"

BAZEL_OPTS="--batch --output_user_root ../build"
# For Java17+
if [ $(${JAVA_HOME}/bin/java -version 2>&1 | grep -E -i 'openjdk version "[1-9]' | sed -E 's|.* "([0-9]+)[.].*|\1|') -ge 17 ] ; then
BAZEL_OPTS="$BAZEL_OPTS --host_jvm_args=--add-opens=java.base/java.nio=ALL-UNNAMED"
BAZEL_OPTS="$BAZEL_OPTS --host_jvm_args=--add-opens=java.base/java.lang=ALL-UNNAMED"
fi

BAZEL_OPTS="$BAZEL_OPTS build -s --verbose_failures --distinct_host_configuration=false"

%if "%{selected_microarch}"
BAZEL_OPTS="$BAZEL_OPTS --copt=%{selected_microarch}"
%if "%{selected_microarch}" != "%{default_microarch}"
BAZEL_OPTS="$BAZEL_OPTS --distinct_host_configuration=true"
%endif
%endif
%if "%{?arch_build_flags}"
BAZEL_OPTS="$BAZEL_OPTS $(echo %{arch_build_flags} | tr ' ' '\n' | grep -v '^$' | sed -e 's|^|--copt=|' | tr '\n' ' ')"
%endif
BAZEL_OPTS="$BAZEL_OPTS --config=%{build_type} --cxxopt=-std=c++%{cms_cxx_standard} --host_cxxopt=-std=c++%{cms_cxx_standard} %{makeprocesses}"
BAZEL_OPTS="$BAZEL_OPTS --config=noaws --config=nogcp --config=nohdfs --config=nonccl"
%if "%{enable_tf_mkldnn}" == "0"
BAZEL_OPTS="$BAZEL_OPTS --define tensorflow_mkldnn_contraction_kernel=0"
%endif
%ifarch ppc64le
BAZEL_OPTS="$BAZEL_OPTS --define tflite_with_xnnpack=false"
%endif

%if %{enable_gpu}
export GCC_HOST_COMPILER_PREFIX=${GCC_ROOT}/bin
export GCC_HOST_COMPILER_PATH=$(which gcc)
export TF_CUDA_COMPUTE_CAPABILITIES=$(echo "compute_%{cuda_arch}" | sed 's|\s\s*|,compute_|g')
export TF_CUDA_VERSION="$(echo ${CUDA_VERSION} | cut -f1,2 -d.)"
export TF_CUDA_PATHS="${CUDA_ROOT},${CUDNN_ROOT}"
export TF_CUDA_CLANG=0
export cuda=Y
%endif
export TF_NEED_CUDA=%{enable_gpu}
export TF_NEED_CLANG=0
export TF_NEED_JEMALLOC=0
export TF_NEED_HDFS=0
export TF_NEED_GCP=0
export TF_ENABLE_XLA=1
export TF_NEED_OPENCL=0
export TF_NEED_VERBS=0
export TF_NEED_MKL=0
export TF_NEED_MPI=0
export TF_NEED_S3=0
export TF_NEED_GDR=0
export TF_NEED_OPENCL_SYCL=0
export TF_SET_ANDROID_WORKSPACE=false
export TF_NEED_KAFKA=false
export TF_NEED_AWS=0
export TF_DOWNLOAD_CLANG=0
export TF_NEED_IGNITE=0
export TF_NEED_ROCM=0
export TF_NEED_TENSORRT=0
export TF_PYTHON_VERSION=%{cms_python3_major_minor_version}
export TEST_TMPDIR=%{_builddir}/build
export TF_CMS_EXTERNALS="%{_builddir}/cms_externals.txt"

echo "png:${LIBPNG_ROOT}"                   >  ${TF_CMS_EXTERNALS}
echo "libjpeg_turbo:${LIBJPEG_TURBO_ROOT}"  >> ${TF_CMS_EXTERNALS}
echo "zlib:${ZLIB_ROOT}"                    >> ${TF_CMS_EXTERNALS}
echo "eigen_archive:${EIGEN_ROOT}"          >> ${TF_CMS_EXTERNALS}
echo "curl:${CURL_ROOT}"                    >> ${TF_CMS_EXTERNALS}
#echo "com_google_protobuf:${PROTOBUF_ROOT}" >> ${TF_CMS_EXTERNALS}
echo "com_github_grpc_grpc:${GRPC_ROOT}"    >> ${TF_CMS_EXTERNALS}
echo "gif:${GIFLIB_ROOT}"                   >> ${TF_CMS_EXTERNALS}
echo "org_sqlite:${SQLITE_ROOT}"            >> ${TF_CMS_EXTERNALS}
echo "cython:"                              >> ${TF_CMS_EXTERNALS}
echo "flatbuffers:${FLATBUFFERS_ROOT}"      >> ${TF_CMS_EXTERNALS}
echo "pybind11:${PY3_PYBIND11_ROOT}"        >> ${TF_CMS_EXTERNALS}
echo "absl_py:${PY3_ABSL_PY_ROOT}"          >> ${TF_CMS_EXTERNALS}
echo "pasta:"                               >> ${TF_CMS_EXTERNALS}
echo "boringssl:"                           >> ${TF_CMS_EXTERNALS}

export TF_SYSTEM_LIBS=$(cat ${TF_CMS_EXTERNALS} | sed 's|:.*||' | tr "\n" "," | sed 's|,*$||')

echo "pypi_numpy:${PY3_NUMPY_ROOT}"         >> ${TF_CMS_EXTERNALS}

#Create local repos for pypi_* packages required by TF
tf_requirement=requirements_lock_%{cms_python3_major_version}_%{cms_python3_minor_version}.txt
for name in $( grep '^[a-zA-Z].*==' ${tf_requirement} | sed 's| *==.*||;s|-|_|g') ; do
  bfile="pypi"
  [ -f third_party/cms/${name}.BUILD ] && bfile="${name}"
  sed -i -e "s|def repos():|def pypi_${name}():\n  cms_new_local_repository(name = \"pypi_${name}\",build_file = \"//third_party/cms:${bfile}.BUILD\")\n\ndef repos():\n    pypi_${name}()|" third_party/cms/workspace.bzl
done
rm -f ${tf_requirement}; touch ${tf_requirement}

# clear the build dir and configure
if [ -d ../build ] ; then
  chmod -R u+w  ../build
  rm -rf ../build
fi

export PYTHONPATH=$PYTHON3PATH

./configure
# build numpy first to fix the pypi_numpy repo
bazel $BAZEL_OPTS //third_party/py/numpy
build_dir=$(readlink bazel-out | sed 's|/execroot/org_tensorflow/bazel-out$||')
ln -s ${PYTHON3_LIB_SITE_PACKAGES} ${build_dir}/external/pypi_numpy/site-packages
# build tensorflow python targets
bazel $BAZEL_OPTS //tensorflow/tools/pip_package:wheel

%install

%ifarch x86_64
%define bazel_dir k8-%{build_type}
%else
%define bazel_dir %{_arch}-%{build_type}
%endif

mkdir %{i}/lib-xla-runtime
find bazel-out/%{bazel_dir}/bin -path '*/pip_package/wheel_house/tensorflow-%{realversion}*.whl' | xargs --no-run-if-empty -i cp '{}' %{i}/
find bazel-out/%{bazel_dir}/bin -path '*/external/ducc/libfft*.pic.a'             | xargs --no-run-if-empty -i cp '{}' %{i}/lib-xla-runtime
find bazel-out/%{bazel_dir}/bin -path '*/external/local_tsl/tsl/*/libmutex.pic.a' | xargs --no-run-if-empty -i cp '{}' %{i}/lib-xla-runtime
find bazel-out/%{bazel_dir}/bin -path '*/external/nsync/libnsync_cpp.pic.a'       | xargs --no-run-if-empty -i cp '{}' %{i}/lib-xla-runtime
for lib in libfft.pic.a libfft_wrapper.pic.a libmutex.pic.a libnsync_cpp.pic.a ; do
  test -e %{i}/lib-xla-runtime/${lib}
done
